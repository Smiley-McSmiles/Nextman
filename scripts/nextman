#!/bin/bash
source /usr/bin/nextman-functions
nextmanVersion=0.1.0
configFile=/opt/open-webui/config/nextman.conf

help="
Nextman v$nextmanVersion

nextman [PARAMETER]

PARAMETERS:
-b,    --backup             Backup Nextman
-bu,   --backup-utility     Start the backup utility
-i,    --import             Import Nextman archive
-e,    --enable             Enable Nextcloud, Apache, and php-fpm
-d,    --disable            Disable Nextcloud, Apache, and php-fpm
-s,    --start              Start Nextcloud, Apache, and php-fpm
-S,    --stop               Stop Nextcloud, Apache, and php-fpm
-r,    --restart            Restart Nextcloud, Apache, and php-fpm
-t,    --status             Get status of httpd.service and php-fpm.service.
-u,    --update             Update Nextcloud
-cp,   --change-port        Change the Nextcloud port
-v,    --version            Get Nextman and Nextcloud version
-vl,   --view-logs          View Nextman logs
-h,    --help               Display this help menu
-X,    --uninstall          Uninstall Nextman, Nextcloud, and php-fpm
Example: sudo nextman -e -s -t
"

Backup()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	_date=$(date +%m-%d-%Y-%H:%M)
	_fileName="nextman-backup-$_date.tar"
	_tarPath=$backupDirectory/$_fileName
	
	ollamaDirs="$(whereis ollama | cut -d ' ' -f 2-)"
	time tar cf "$_tarPath" $defaultDir /usr/bin/nextman /usr/bin/nextman-functions $ollamaDirs /etc/systemd/system/ollama.service $serviceDirectory/nextman-backup.service $serviceDirectory/nextman-backup.timer $serviceDirectory/open-webui.service
	
	USER1=$(stat -c '%U' "$backupDirectory")
	chown -f $USER1:$USER1 "$_tarPath"
	chmod -f 770 "$_tarPath"
	
	echo "> Your backup is:"
	_tarSize=$(du -h "$_tarPath")
	echo "> Size: $_tarSize"
	
	Log "BACKUP | Created backup $_tarPath" $logFile
}

BackupAuto()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	
	Backup
	
	tarList=$(ls -1 "$backupDirectory"/nextman-backup*.tar)
	newestTar=$(echo "$tarList" | tail -n 1)
	oldestTar=$(echo "$tarList" | head -n 1)
	tarCount=$(echo "$tarList" | wc -l)

	while [[ $tarCount -gt $maxBackupNumber ]]; do
		Log "BACKUP-AUTO | More than $maxBackupNumber, removing $oldestTar" $logFile
		echo "> There are $tarCount backups."
		echo "> Since there are more than $maxBackupNumber backups..."
		echo "> Nextman is removing $oldestTar"
		# echo "> NewBackup=$newestTar"
		rm -f "$oldestTar"
		tarList=$(ls -1 "$backupDirectory"/nextman-backup*.tar)
		newestTar=$(echo "$tarList" | tail -n 1)
		oldestTar=$(echo "$tarList" | head -n 1)
		tarCount=$(echo "$tarList" | wc -l)
	done
}

BackupUtility()
{
	if ! HasSudo; then
		exit
	fi

	while true; do
		clear
		optionNumber=
		autoBackupSwitch=
		source $configFile
		
		if [[ ! -d $backupDirectory ]]; then
			PromptUser dir "> Please enter your desired directory for backup archives"
			backupDirectory="$promptResult"
			PromptUser num "> Please enter your desired maximum number of backup archives" 1 20 "1-20"
			maxBackupNumber=$promptResult
			systemctl enable --now nextman-backup.timer
			SetVar backupDirectory "$backupDirectory" "$configFile" bash directory
			SetVar maxBackupNumber $maxBackupNumber "$configFile" bash int
			SetVar autoBackups true "$configFile" bash bool
			SetVar backupFrequency "weekly" "$configFile" bash string
			Log "BACKUP-UTILITY | Setup Backup Utility at $backupDirectory max of $maxBackupNumber done weekly" $logFile
		fi
		
		source $configFile
		
		if $autoBackups; then
			autoBackupSwitch="ON"
		else
			autoBackupSwitch="OFF"
		fi
		echo
		echo "> Automatic backups are $autoBackupSwitch"
		echo
		echo "> 1. Enable automatic backups"
		echo "> 2. Disable automatic backups"
		echo "> 3. Change backup folder"
		echo "> 4. Change max backups [ $maxBackupNumber ]"
		echo "> 5. Change frequency of backups [ $backupFrequency ]"
		echo "> 6. Create a nextman-backup.tar archive"
		echo "> 7. EXIT"
		echo
		PromptUser num "> Please select the number corresponding with the option you want to select." 1 7 "1-7"
		optionNumber=$promptResult
		echo
		case $optionNumber in
			"1")
				# enable auto-backups
				systemctl enable --now nextman-backup.timer
				SetVar autoBackups true "$configFile" bash bool
				Log "BACKUP-UTILITY | Automatic backups enabled" $logFile
				;;
			"2")
				# disable auto-backups
				systemctl disable --now nextman-backup.timer
				SetVar autoBackups false "$configFile" bash bool
				Log "BACKUP-UTILITY | Automatic backups disabled" $logFile
				;;
			"3")
				# change backup folder
				if [[ -n $backupDirectory ]]; then
					echo "> Current directory for backups is $backupDirectory"
				fi
				PromptUser dir "> Please enter your desired directory for backup archives"
				backupDirectory="$promptResult"
				SetVar "backupDirectory" "$backupDirectory" "$configFile" bash directory
				Log "BACKUP-UTILITY | Automatic backup location changed to $backupDirectory" $logFile
				;;
			"4")
				# change max backups
				if [[ -n $maxBackupNumber ]]; then
					echo "> Current maximum backups allowed is $maxBackupNumber"
				fi
				PromptUser num "> Please enter your desired maximum number of backup archives" 1 50 "1-50"
				maxBackupNumber=$promptResult
				SetVar maxBackupNumber "$maxBackupNumber" "$configFile" bash int
				Log "BACKUP-UTILITY | Max automatic backups changed to $maxBackupNumber " $logFile
				;;
			"5")
				# change frequency of backups
				echo "> Automatic backups will be done on a $backupFrequency basis."
				echo
				echo "> 1. Daily backups"
				echo "> 2. Weekly backups"
				echo "> 3. Monthly backups"
				echo
				PromptUser num "> Please select the number corresponding with the option you want to select." 1 3 "1-3"
				_optionNumber=$promptResult
				echo
				nextmanBackupTimer=$serviceDirectory/nextman-backup.timer
				case $_optionNumber in
					"1")
						SetVar backupFrequency "daily" "$configFile" bash string
						sed -i "s|OnCalendar.*|OnCalendar=*-*-* 01:00:00|g" $nextmanBackupTimer
						echo "> Backups will now be created every day at 1:00 AM"
						read -p "> Press ENTER to exit" ENTER
						Log "BACKUP-UTILITY | Frequency of automatic backups changed to daily" $logFile
						;;
					"2")
						SetVar backupFrequency "weekly" "$configFile" bash string
						sed -i "s|OnCalendar.*|OnCalendar=Sun *-*-* 01:00:00|g" $nextmanBackupTimer
						echo "> Backups will now be created every Sunday at 1:00 AM"
						read -p "> Press ENTER to exit" ENTER
						Log "BACKUP-UTILITY | Frequency of automatic backups changed to weekly" $logFile
						;;
					"3")
						SetVar backupFrequency "monthly" "$configFile" bash string
						sed -i "s|OnCalendar.*|OnCalendar=*-*-01 01:00:00|g" $nextmanBackupTimer
						echo "> Backups will now be created on the 1st of every month at 1:00 AM"
						read -p "> Press ENTER to exit" ENTER
						Log "BACKUP-UTILITY | Frequency of automatic backups changed to monthly" $logFile
						;;
				esac
				systemctl daemon-reload
				systemctl restart nextman-backup.timer
				;;
			"6")
				nextman -ba
				exit
				;;
			"7")
				exit
				;;
		esac
	done
}

Import() {
	if ! HasSudo; then
		exit
	fi

	source $configFile
	
	echo "> WARNING!: This procedure will completely erase $defaultDir"
	importTarDir=$backupDirectory
	PresentList "$importTarDir" "Please enter the number corresponding to the .tar you want to select." "nextman-backup-"
	importTar=$importTarDir/$presentListResult
	
	nextman -S
	rm -rf $defaultDir
	tar xf $importTar -C /

	chown -Rf $defaultUser:$defaultUser $defaultDir
	chmod -Rf 770 $defaultDir
	nextman -s
	Log "IMPORT | Imported $importTar" $logFile
}

ChangePort()
{
	PromptUser num "Enter a valid port" 1024 65535 "$minNumber-$maxNumber"
	httpPort=$promptResult
	echo "> Changing Nextcloud port to $httpPort"
	SetVar httpPort $httpPort "$configFile" bash int
	sed -ri "s|8090|-$httpPort|g" $defaultDir/open-webui/backend/start.sh
	Log "SETUP | SetVar httpPort=$httpPort" $logFile
	Control restart
}

Update()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
}

Control()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	
	case "$1" in
		start) systemctl start php-fpm mariadb httpd
			Log "NEXTMAN | Started Nextcloud, Mariadb, php-fpm, and Apache" $logFile ;;
		stop) systemctl stop php-fpm mariadb httpd
			Log "NEXTMAN | Stopped Nextcloud, Mariadb, php-fpm, and Apache" $logFile ;;
		enable) systemctl enable php-fpm mariadb httpd
			Log "NEXTMAN | Enabled Nextcloud, Mariadb, php-fpm, and Apache" $logFile ;;
		disable) systemctl disable php-fpm mariadb httpd
			Log "NEXTMAN | Disabled Nextcloud, Mariadb, php-fpm, and Apache" $logFile ;;
		restart) systemctl restart php-fpm mariadb httpd
			Log "NEXTMAN | Restarted Nextcloud, Mariadb, php-fpm, and Apache" $logFile ;;
		status) systemctl status php-fpm mariadb httpd
			Log "NEXTMAN | Restarted Nextcloud, Mariadb, php-fpm, and Apache" $logFile ;;
	esac
}

Uninstall()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	if PromptUser yN "Are you sure you want to fully uninstall LLaman/Ollama/Open-webui/OpendAI-Speech?" 0 0 "y/N"; then
		nextman -d -S
		userdel $defaultUser
		userdel ollama
		groupdel $defaultUser
		groupdel ollama
		rm -rf $serviceLocation/open-webui.service \
			$serviceLocation/ollama.service \
			/usr/local/bin/ollama \
			$defaultDir \
			$ollamaModelsDirectory \
			/usr/share/ollama \
			/usr/bin/nextman
		echo ">> Nextman | Ollama | Open-WebUI | OpendAI-Speech <<"
		echo ">>                HAS BEEN DELETED!              <<"
	 else
		exit
	fi
}

Help ()
{
echo "$help"
}

###############################################################################
# MAIN                                                                        #
###############################################################################
if [ -n "$1" ]; then
   while [ -n "$1" ]; do
      case "$1" in
         -b | --backup) Backup ;;
         -ba | --backup-auto) BackupAuto ;;
         -bu | --backup-utility) BackupUtility ;;
         -i | --import) Import ;;
         -e | --enable) Control "enable" ;;
         -d | --disable) Control "disable" ;;
         -S | --stop) Control "stop" ;;
         -s | --start) Control "start" ;;
         -r | --restart) Control "restart" ;;
         -t | --status) Control "status" ;;
         -I | --install) InstallModel ;;
         -R | --remove) RemoveModel ;;
         -rg | --remove-gguf) RemoveGGUF ;;
         -D | --download) DownloadModel ;;
         -u | --update) Update ;;
         -cp | --change-port) ChangePort ;;
         -cps | --change-port-speech) ChangePortSpeech ;;
         -v | --version) GetVersions ;;
         -vl | --view-logs) if ! HasSudo; then
		exit
	fi

         		source $configFile
         		ViewLog "$defaultDir/log" ;;
         -X | --uninstall) Uninstall ;;
         -h | --help) Help ;;
         *) echo "Option $1 not recognized"
            Help ;;
      esac
      shift
   done
else
   echo "> No parameters given."
   Help
   exit
fi
